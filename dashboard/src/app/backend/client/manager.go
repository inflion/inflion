package client

import (
	"fmt"

	"github.com/inflion/inflion/client/inflion"
	authApi "github.com/inflion/inflion/dashboard/src/app/backend/auth/api"
	clientapi "github.com/inflion/inflion/dashboard/src/app/backend/client/api"
)

// Dashboard UI default values for client configs.
const (
	// Header name that contains token used for authorization. See TokenManager for more information.
	JWETokenHeader = "jweToken"

	// Default http header for user-agent
	DefaultUserAgent = "dashboard"
)

// clientManager implements ClientManager interface
type clientManager struct {
	// Autogenerated key on backend start used to secure requests from csrf attacks
	csrfKey       string
	apiserverHost string

	// Inflion client created without providing auth info. It uses permissions granted to
	// service account used by dashboard or lionconfig file if it was passed during dashboard init.
	insecureClient inflion.Interface

	// Responsible for decrypting tokens coming in request header. Used for authentication.
	tokenManager authApi.TokenManager
}

// CSRFKey returns key that is generated upon client manager creation
func (m *clientManager) CSRFKey() string {
	return m.csrfKey
}

func (m *clientManager) init() {
	m.initCSRFKey()
}

func (m *clientManager) initCSRFKey() {
	m.csrfKey = clientapi.GenerateCSRFKey()
}

// SetTokenManager sets the token manager that will be used for token decryption.
func (m *clientManager) SetTokenManager(manager authApi.TokenManager) {
	m.tokenManager = manager
}

// InsecureClient returns inflion client that was created without providing auth info. It uses
// permissions granted to service account used by dashboard lionconfig file if it was passed
// during dashboard init.
func (m *clientManager) InsecureClient() inflion.Interface {
	return m.insecureClient
}

// HasAccess configures Inflion api client with provided auth info and executes a basic check against apiserver to see
// if it is valid.
func (m *clientManager) HasAccess(authInfo authApi.AuthInfo) error {
	// TODO Implement access check to inflion apiserver
	if authInfo.Username == "reoring" && authInfo.Password == "mynameisreoring!" {
		return nil
	} else {
		return fmt.Errorf("you are not permitted")
	}

	// cfg, err := self.buildConfigFromFlags(self.apiserverHost, self.kubeConfigPath)
	// if err != nil {
	// 	return err
	// }

	// clientConfig := self.buildCmdConfig(&authInfo, cfg)
	// cfg, err = clientConfig.ClientConfig()
	// if err != nil {
	// 	return err
	// }

	// client, err := kubernetes.NewForConfig(cfg)
	// if err != nil {
	// 	return err
	// }

	// _, err = client.ServerVersion()
	// return err
}

func NewClientManager(apiserverHost string) clientapi.ClientManager {
	result := &clientManager{
		apiserverHost: apiserverHost,
	}

	result.init()
	return result
}

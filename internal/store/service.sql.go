// Code generated by sqlc. DO NOT EDIT.
// source: service.sql

package store

import (
	"context"
)

const linkInstanceWithService = `-- name: LinkInstanceWithService :one
INSERT INTO instance_at_service(service_id, instance_id)
VALUES ($1, $2)
ON CONFLICT ON CONSTRAINT instance_at_service_service_id_instance_id_key
  DO NOTHING
RETURNING id, service_id, instance_id, created_at, updated_at
`

type LinkInstanceWithServiceParams struct {
	ServiceID  int64
	InstanceID int64
}

func (q *Queries) LinkInstanceWithService(ctx context.Context, arg LinkInstanceWithServiceParams) (InstanceAtService, error) {
	row := q.queryRow(ctx, q.linkInstanceWithServiceStmt, linkInstanceWithService, arg.ServiceID, arg.InstanceID)
	var i InstanceAtService
	err := row.Scan(
		&i.ID,
		&i.ServiceID,
		&i.InstanceID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertService = `-- name: UpsertService :one
INSERT INTO service(name, project_id)
VALUES ($1, $2)
ON CONFLICT ON CONSTRAINT service_project_id_name_key
    DO UPDATE
    SET name = EXCLUDED.name
RETURNING id, project_id, name, created_at, updated_at
`

type UpsertServiceParams struct {
	Name      string
	ProjectID int64
}

func (q *Queries) UpsertService(ctx context.Context, arg UpsertServiceParams) (Service, error) {
	row := q.queryRow(ctx, q.upsertServiceStmt, upsertService, arg.Name, arg.ProjectID)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// source: project.sql

package store

import (
	"context"
)

const addToProject = `-- name: AddToProject :one
INSERT INTO project_collaborator(user_id, project_id)
VALUES ($1, $2)
RETURNING user_id, project_id, created_at, updated_at
`

type AddToProjectParams struct {
	UserID    string
	ProjectID int64
}

func (q *Queries) AddToProject(ctx context.Context, arg AddToProjectParams) (ProjectCollaborator, error) {
	row := q.queryRow(ctx, q.addToProjectStmt, addToProject, arg.UserID, arg.ProjectID)
	var i ProjectCollaborator
	err := row.Scan(
		&i.UserID,
		&i.ProjectID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const confirmInvitation = `-- name: ConfirmInvitation :one
UPDATE project_invitation SET confirmed = true WHERE token = $1 RETURNING id, invitee_user_id, project_id, mail_address, token, confirmed, created_at, updated_at
`

func (q *Queries) ConfirmInvitation(ctx context.Context, token string) (ProjectInvitation, error) {
	row := q.queryRow(ctx, q.confirmInvitationStmt, confirmInvitation, token)
	var i ProjectInvitation
	err := row.Scan(
		&i.ID,
		&i.InviteeUserID,
		&i.ProjectID,
		&i.MailAddress,
		&i.Token,
		&i.Confirmed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const countProjectCollaboratorByUserId = `-- name: CountProjectCollaboratorByUserId :one
SELECT count(*)
FROM project_collaborator
WHERE
    user_id = $1
    AND
    project_id = $2
`

type CountProjectCollaboratorByUserIdParams struct {
	UserID    string
	ProjectID int64
}

func (q *Queries) CountProjectCollaboratorByUserId(ctx context.Context, arg CountProjectCollaboratorByUserIdParams) (int64, error) {
	row := q.queryRow(ctx, q.countProjectCollaboratorByUserIdStmt, countProjectCollaboratorByUserId, arg.UserID, arg.ProjectID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getInvitationByToken = `-- name: GetInvitationByToken :one
SELECT id, invitee_user_id, project_id, mail_address, token, confirmed, created_at, updated_at
FROM project_invitation
WHERE
    token = $1
`

func (q *Queries) GetInvitationByToken(ctx context.Context, token string) (ProjectInvitation, error) {
	row := q.queryRow(ctx, q.getInvitationByTokenStmt, getInvitationByToken, token)
	var i ProjectInvitation
	err := row.Scan(
		&i.ID,
		&i.InviteeUserID,
		&i.ProjectID,
		&i.MailAddress,
		&i.Token,
		&i.Confirmed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
